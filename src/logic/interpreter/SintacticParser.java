
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 02 03:58:31 CST 2016
//----------------------------------------------------

package logic.interpreter;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 02 03:58:31 CST 2016
  */
public class SintacticParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticParser() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\012\000\002\004\003" +
    "\000\002\005\012\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\010\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\004\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\032\003\017\005\016\006\015\007\010\010" +
    "\006\011\023\012\013\013\022\014\011\015\005\017\014" +
    "\020\021\001\002\000\034\002\077\003\017\005\016\006" +
    "\015\007\010\010\006\011\023\012\013\013\022\014\011" +
    "\015\005\017\014\020\021\001\002\000\004\023\025\001" +
    "\002\000\004\023\025\001\002\000\036\002\uffff\003\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\014\uffff\015\uffff\017\uffff\020\uffff\022\uffff\001\002" +
    "\000\004\023\025\001\002\000\004\023\025\001\002\000" +
    "\036\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\020" +
    "\ufffe\022\ufffe\001\002\000\004\023\025\001\002\000\004" +
    "\023\025\001\002\000\004\023\025\001\002\000\004\023" +
    "\025\001\002\000\036\002\ufff1\003\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\022\ufff1\001\002\000\036\002\ufffc" +
    "\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\020\ufffc\022\ufffc" +
    "\001\002\000\004\023\025\001\002\000\004\023\025\001" +
    "\002\000\004\023\025\001\002\000\012\023\027\025\031" +
    "\027\032\030\026\001\002\000\052\002\uffec\003\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\027\uffec\030\uffec\001\002\000\006" +
    "\022\ufff0\023\ufff0\001\002\000\052\002\uffed\003\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\027\uffed\030\uffed\001\002\000\004" +
    "\023\025\001\002\000\006\022\uffee\023\uffee\001\002\000" +
    "\006\022\uffef\023\uffef\001\002\000\006\021\034\023\027" +
    "\001\002\000\032\003\017\005\016\006\015\007\010\010" +
    "\006\011\023\012\013\013\022\014\011\015\005\017\014" +
    "\020\021\001\002\000\034\003\017\005\016\006\015\007" +
    "\010\010\006\011\023\012\013\013\022\014\011\015\005" +
    "\017\014\020\021\022\037\001\002\000\036\002\001\003" +
    "\001\005\001\006\001\007\001\010\001\011\001\012\001" +
    "\013\001\014\001\015\001\017\001\020\001\022\001\001" +
    "\002\000\004\023\025\001\002\000\040\002\ufffd\003\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\023\027" +
    "\001\002\000\012\023\027\025\031\027\032\030\026\001" +
    "\002\000\004\023\025\001\002\000\040\002\ufff6\003\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\022\ufff6\023\027" +
    "\001\002\000\040\002\ufff3\003\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\017\ufff3\020\ufff3\022\ufff3\023\027\001\002\000\012\023" +
    "\027\025\031\027\032\030\026\001\002\000\004\023\025" +
    "\001\002\000\040\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\017\ufffa\020\ufffa\022\ufffa\023\027\001\002\000\012\023" +
    "\027\025\031\027\032\030\026\001\002\000\004\023\025" +
    "\001\002\000\040\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\017\ufff9\020\ufff9\022\ufff9\023\027\001\002\000\040\002" +
    "\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\022" +
    "\ufff4\023\027\001\002\000\006\021\055\023\027\001\002" +
    "\000\010\025\031\027\032\030\026\001\002\000\004\023" +
    "\025\001\002\000\012\023\027\025\031\027\032\030\026" +
    "\001\002\000\004\022\061\001\002\000\004\023\025\001" +
    "\002\000\040\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\023\027\001\002\000\040\002\ufff5" +
    "\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\022\ufff5" +
    "\023\027\001\002\000\012\023\027\025\031\027\032\030" +
    "\026\001\002\000\004\023\025\001\002\000\040\002\ufff8" +
    "\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8" +
    "\023\027\001\002\000\012\023\027\025\031\027\032\030" +
    "\026\001\002\000\004\023\025\001\002\000\040\002\ufff7" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\023\027\001\002\000\006\023\027\024\073\001\002\000" +
    "\004\023\025\001\002\000\012\023\027\025\031\027\032" +
    "\030\026\001\002\000\004\023\025\001\002\000\040\002" +
    "\ufff2\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\020\ufff2\022" +
    "\ufff2\023\027\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\012\002\003\003\006\004\011\005\017\001" +
    "\001\000\010\003\035\004\011\005\017\001\001\000\004" +
    "\007\071\001\001\000\004\007\066\001\001\000\002\001" +
    "\001\000\004\007\063\001\001\000\004\007\062\001\001" +
    "\000\002\001\001\000\004\007\053\001\001\000\004\007" +
    "\052\001\001\000\004\007\047\001\001\000\004\007\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\043\001\001\000\004\007\040\001\001\000\004\007\023" +
    "\001\001\000\004\006\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\034\003\006\004\011\005\017\001\001\000\010" +
    "\003\035\004\011\005\017\001\001\000\002\001\001\000" +
    "\004\007\037\001\001\000\002\001\001\000\004\006\041" +
    "\001\001\000\004\007\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\045\001\001\000\004\007\046" +
    "\001\001\000\002\001\001\000\004\006\050\001\001\000" +
    "\004\007\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\055\001\001\000\004\007" +
    "\056\001\001\000\004\006\057\001\001\000\002\001\001" +
    "\000\004\007\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\064\001\001\000\004\007\065\001\001" +
    "\000\002\001\001\000\004\006\067\001\001\000\004\007" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\073\001\001\000\004\006\074\001\001\000\004\007" +
    "\075\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
  public Interpreter _interpreter;
  
  private boolean _debug = false;
  
  
  public SintacticParser(Interpreter pInterpreter, java_cup.runtime.Scanner pScanner, boolean pDebug){
     super(pScanner);
     _interpreter = pInterpreter;
    _debug = pDebug;
    
  }
  
  
  
    /**
     * Método que analiza un archivo txt
     */
    public void analizarTxt(String pFileName){
    try {
      //SintacticParser sintactico = new SintacticParser(new LexicalParser(new FileReader(pFileName)));
      Object resultado = this.parse().value;
      if(resultado instanceof LProgram){
      	LProgram result = (LProgram) resultado;
      	result.prepare();
      	result.execute();
      }
      else{
      	LPartialOrder result = (LPartialOrder) resultado;
      	result.prepare();
      	result.execute();
      } 
      if(_debug)
	System.out.println(ConstInterpreter.SIN_FINISH_PARSE_TXT + pFileName);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
 
  
  
  
  public void analizarEntrada(StringReader pReader){
    try {
      SintacticParser sintactico = new SintacticParser(new LexicalParser(pReader));
      Object resultado = sintactico.parse().value;
      if(_debug)
	System.out.println(ConstInterpreter.SIN_FINISH_PARSE_ENTRY);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
  

  
  /**
   * Método que indica sobre un error sintactico encontrado
   */
  public void report_error(String pMessage, Object pInfo) {
    
    StringBuilder string = new StringBuilder("Error");
    
    if(pInfo instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) pInfo);
      
      if (symbol.left >= 0) {
	string.append(" en la linea " + (symbol.left+1));
	
	if (symbol.right >= 0)
	  string.append(", columna " + (symbol.right+1));
      }
    }
    
    string.append(" : " + pMessage);
    System.err.println(string);
  }
  
  
  /**
   * Método que se llama cuando se encuentra un error del cual
   * no se puede recuperar
   */    
  public void report_fatal_error(String pMessage, Object pInfo) {
    report_error(pMessage, pInfo);
    System.exit(1);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   * del cual no es posible recuperarse
   */
  public void unrecovered_syntax_error(Symbol cur_token){
    String report = "No se logro recuperar del error, se detuvo el parseo";
    report_fatal_error(report, null);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   */
  public void syntax_error(Symbol cur_token){
     report_error("Error de sintaxis", cur_token);
  }
  


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticParser$actions {


    

  

  private final SintacticParser parser;

  /** Constructor */
  CUP$SintacticParser$actions(SintacticParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticParser$do_action(
    int                        CUP$SintacticParser$act_num,
    java_cup.runtime.lr_parser CUP$SintacticParser$parser,
    java.util.Stack            CUP$SintacticParser$stack,
    int                        CUP$SintacticParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // espacios ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios",5, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // espacios ::= espacios ESPACIO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios",5, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param ::= PARAM 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new String(v); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new Integer(e); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= FLOAT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		Float p = (Float)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new Float(p); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaOrdenes ::= error 
            {
              LListOrders RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaOrdenes ::= HAZ espacios VAR espacios param espacios 
            {
              LListOrders RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(f); params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_HAZ, params);   
		      //RESULT = new String("Variable: " + f + " Valor: " + p); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaOrdenes ::= BJ_LAPIZ espacios 
            {
              LListOrders RESULT =null;
		 RESULT = new LListOrders(ConstInterpreter.CMD_BL, null);  
		      //RESULT = new String("BAJE EL LAPIZ"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaOrdenes ::= SB_LAPIZ espacios 
            {
              LListOrders RESULT =null;
		 RESULT = new LListOrders(ConstInterpreter.CMD_SL, null);  
		      //RESULT = new String("SUBI EL LAPIZ"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaOrdenes ::= CENTRO espacios 
            {
              LListOrders RESULT =null;
		 RESULT = new LListOrders(ConstInterpreter.CMD_CENTER, null);  
		      //RESULT = new String("ME COLOQUE EN EL CENTRO"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaOrdenes ::= PON_RUMBO espacios param espacios 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_RUMBO, params);  
		      //RESULT = new String("GIRE: " + p.intValue() + " grados"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaOrdenes ::= GI espacios param espacios 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_GI, params);  
		      //RESULT = new String("GIRE " + p.intValue() + " A LA IZQUIERDA"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaOrdenes ::= GD espacios param espacios 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_GD, params);  
		      //RESULT = new String("GIRE " + p.intValue() + " A LA DERECHA"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaOrdenes ::= RE espacios param espacios 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_RE, params);  
		   //RESULT = new String("RETROCEDI: " + p.intValue()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaOrdenes ::= AV espacios param espacios 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_AV, params); 
		   	  //RESULT = new String("AVANCE: " + p.intValue()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaOrdenes ::= PON_POS espacios PC_IZQ param espacios param PC_DER espacios 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p); params.add(t);
		      RESULT = new LListOrders(ConstInterpreter.CMD_POS, params); 
		      //RESULT = new String("ME MOVI A X: " + p.intValue() + " Y: " + t.intValue()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // orden ::= listaOrdenes 
            {
              LOrder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LListOrders s = (LListOrders)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LOrder(s);
	       //RESULT = s; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("orden",2, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // orden ::= REPITE espacios param espacios PC_IZQ programa PC_DER espacios 
            {
              LOrder RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		LProgram r = (LProgram)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		 LRepeat repeat = new LRepeat(p, r);
	       RESULT = new LOrder(repeat);
	       //RESULT = new String("REPETI " + p.intValue() + " veces "  ); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("orden",2, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ordenParcial ::= orden 
            {
              LPartialOrder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LOrder s = (LOrder)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LPartialOrder(s);
		      //System.out.println(s); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("ordenParcial",1, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= ordenParcial 
            {
              LProgram RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LPartialOrder o = (LPartialOrder)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LProgram(o); 
			 	//System.out.println("ORDEN PARCIAL"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		LProgram start_val = (LProgram)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		RESULT = start_val;
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticParser$parser.done_parsing();
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= programa ordenParcial 
            {
              LProgram RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		LProgram p = (LProgram)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LPartialOrder o = (LPartialOrder)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LProgram(p, o); 
				   //System.out.println("PROGRAMA"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

