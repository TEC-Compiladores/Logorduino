
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 03 23:53:30 CST 2016
//----------------------------------------------------

package logic.interpreter;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.io.FileReader;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 03 23:53:30 CST 2016
  */
public class SintacticParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticParser() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\004\013" +
    "\000\002\004\003\000\002\005\014\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\010\000\002\005\003\000\002\005\003" +
    "\000\002\012\006\000\002\012\010\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\013\005\000\002" +
    "\013\003\000\002\007\004\000\002\007\002\000\002\010" +
    "\004\000\002\010\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\036\003\021\005\010\006\014\007\022\010" +
    "\020\011\025\012\017\013\006\014\015\015\004\016\012" +
    "\017\005\020\016\031\024\001\002\000\006\023\uffe6\026" +
    "\uffe6\001\002\000\046\002\uffe6\003\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043\025\040" +
    "\031\uffe6\001\002\000\012\023\uffe6\027\uffe6\031\uffe6\032" +
    "\uffe6\001\002\000\040\002\ufffe\003\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\017\ufffe\020\ufffe\022\ufffe\031\ufffe\001\002\000\012" +
    "\023\uffe6\027\uffe6\031\uffe6\032\uffe6\001\002\000\040\002" +
    "\uffff\003\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\017\uffff\020\uffff\022" +
    "\uffff\031\uffff\001\002\000\006\023\uffe6\030\uffe6\001\002" +
    "\000\036\002\076\003\021\005\010\006\014\007\022\010" +
    "\020\011\025\012\017\013\006\014\015\015\004\017\005" +
    "\020\016\031\024\001\002\000\012\023\uffe6\027\uffe6\031" +
    "\uffe6\032\uffe6\001\002\000\046\002\uffe6\003\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043" +
    "\025\040\031\uffe6\001\002\000\046\002\uffe6\003\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024" +
    "\043\025\040\031\uffe6\001\002\000\006\021\uffe6\023\uffe6" +
    "\001\002\000\012\023\uffe6\027\uffe6\031\uffe6\032\uffe6\001" +
    "\002\000\040\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\020\uffef\022\uffef\031\uffef\001\002\000\012\023\uffe6" +
    "\027\uffe6\031\uffe6\032\uffe6\001\002\000\040\002\ufffd\003" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\017\ufffd\020\ufffd\022\ufffd\031" +
    "\ufffd\001\002\000\040\002\ufff0\003\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\022\ufff0\031\ufff0\001\002\000\012" +
    "\023\uffe6\027\uffe6\031\uffe6\032\uffe6\001\002\000\040\002" +
    "\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\022" +
    "\ufffb\031\ufffb\001\002\000\012\023\032\027\031\031\034" +
    "\032\033\001\002\000\006\021\uffe6\023\uffe6\001\002\000" +
    "\054\002\uffea\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027\uffea" +
    "\031\uffea\032\uffea\001\002\000\056\002\uffe7\003\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\001\002\000\054\002\uffec\003\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\027\uffec\031\uffec\032\uffec\001\002\000\054\002\uffeb" +
    "\003\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\001\002\000\006\021\036\023\032\001\002\000\044" +
    "\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\023\uffe6\024\043\025\040\031\uffe6\001\002\000\050\002" +
    "\uffe2\003\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\022\uffe2\023\032\027\uffe2\031\uffe2\032\uffe2\001\002" +
    "\000\046\002\uffe1\003\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\027\uffe1\031\uffe1\032\uffe1\001" +
    "\002\000\052\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\051\027\uffe6" +
    "\031\uffe6\032\uffe6\001\002\000\036\003\021\005\010\006" +
    "\014\007\022\010\020\011\025\012\017\013\006\014\015" +
    "\015\004\016\012\017\005\020\016\031\024\001\002\000" +
    "\052\002\uffe4\003\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\027\uffe4\031\uffe4" +
    "\032\uffe4\001\002\000\036\003\021\005\010\006\014\007" +
    "\022\010\020\011\025\012\017\013\006\014\015\015\004" +
    "\017\005\020\016\022\046\031\024\001\002\000\040\002" +
    "\001\003\001\005\001\006\001\007\001\010\001\011\001" +
    "\012\001\013\001\014\001\015\001\017\001\020\001\022" +
    "\001\031\001\001\002\000\046\002\uffe6\003\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043" +
    "\025\040\031\uffe6\001\002\000\040\002\ufffc\003\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\017\ufffc\020\ufffc\022\ufffc\031\ufffc\001" +
    "\002\000\050\002\uffe3\003\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\023\032\027\uffe3\031\uffe3" +
    "\032\uffe3\001\002\000\052\002\uffe5\003\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\001\002\000\012\023\032" +
    "\027\031\031\034\032\033\001\002\000\046\002\uffe6\003" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\024\043\025\040\031\uffe6\001\002\000\040\002\ufff7" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\031\ufff7\001\002\000\012\023\032\027\031\031\034\032" +
    "\033\001\002\000\046\002\uffe6\003\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043\025\040" +
    "\031\uffe6\001\002\000\040\002\ufff6\003\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\017\ufff6\020\ufff6\022\ufff6\031\ufff6\001\002\000" +
    "\006\021\061\023\032\001\002\000\016\023\uffe6\024\043" +
    "\025\040\027\uffe6\031\uffe6\032\uffe6\001\002\000\010\027" +
    "\031\031\034\032\033\001\002\000\012\023\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\001\002\000\012\023\032\027\031\031" +
    "\034\032\033\001\002\000\012\022\uffe6\023\uffe6\024\043" +
    "\025\040\001\002\000\004\022\067\001\002\000\046\002" +
    "\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\022" +
    "\uffe6\023\uffe6\024\043\025\040\031\uffe6\001\002\000\040" +
    "\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa" +
    "\022\ufffa\031\ufffa\001\002\000\040\002\ufff2\003\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\017\ufff2\020\ufff2\022\ufff2\031\ufff2\001" +
    "\002\000\040\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017" +
    "\ufff4\020\ufff4\022\ufff4\031\ufff4\001\002\000\012\023\032" +
    "\027\031\031\034\032\033\001\002\000\046\002\uffe6\003" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\024\043\025\040\031\uffe6\001\002\000\040\002\ufff8" +
    "\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8" +
    "\031\ufff8\001\002\000\004\002\000\001\002\000\006\023" +
    "\032\030\100\001\002\000\050\002\uffe6\003\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043" +
    "\025\040\027\uffe6\031\uffe6\001\002\000\044\002\uffe2\003" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023" +
    "\032\027\104\031\uffe2\001\002\000\040\002\uffee\003\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\017\uffee\020\uffee\022\uffee\031\uffee" +
    "\001\002\000\050\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043\025\040\027" +
    "\uffe6\031\uffe6\001\002\000\050\002\uffe8\003\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\027\uffe8\031\uffe8\001\002\000\044\002\uffe2\003" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2\023" +
    "\032\027\107\031\uffe2\001\002\000\040\002\uffed\003\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\017\uffed\020\uffed\022\uffed\031\uffed" +
    "\001\002\000\050\002\uffe9\003\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\027" +
    "\uffe9\031\uffe9\001\002\000\012\023\032\027\031\031\034" +
    "\032\033\001\002\000\046\002\uffe6\003\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\043\025" +
    "\040\031\uffe6\001\002\000\040\002\ufff9\003\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\015\ufff9\017\ufff9\020\ufff9\022\ufff9\031\ufff9\001\002" +
    "\000\012\023\032\027\031\031\034\032\033\001\002\000" +
    "\046\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020" +
    "\uffe6\022\uffe6\023\uffe6\024\043\025\040\031\uffe6\001\002" +
    "\000\040\002\ufff5\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5" +
    "\020\ufff5\022\ufff5\031\ufff5\001\002\000\040\002\ufff3\003" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\022\ufff3\031" +
    "\ufff3\001\002\000\006\023\032\026\120\001\002\000\012" +
    "\023\uffe6\027\uffe6\031\uffe6\032\uffe6\001\002\000\012\023" +
    "\032\027\031\031\034\032\033\001\002\000\046\002\uffe6" +
    "\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\022\uffe6" +
    "\023\uffe6\024\043\025\040\031\uffe6\001\002\000\040\002" +
    "\ufff1\003\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\022" +
    "\ufff1\031\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\014\002\012\003\010\004\022\005\025\012" +
    "\006\001\001\000\004\007\116\001\001\000\010\007\036" +
    "\010\040\011\115\001\001\000\004\007\112\001\001\000" +
    "\002\001\001\000\004\007\107\001\001\000\002\001\001" +
    "\000\004\007\076\001\001\000\010\003\044\004\022\005" +
    "\025\001\001\000\004\007\072\001\001\000\010\007\036" +
    "\010\040\011\071\001\001\000\010\007\036\010\040\011" +
    "\070\001\001\000\004\007\057\001\001\000\004\007\054" +
    "\001\001\000\002\001\001\000\004\007\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\026\001\001" +
    "\000\002\001\001\000\004\006\027\001\001\000\004\007" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\036\010\040\011\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\047\001\001\000\014\002\043\003" +
    "\010\004\022\005\025\012\006\001\001\000\002\001\001" +
    "\000\010\003\044\004\022\005\025\001\001\000\002\001" +
    "\001\000\010\007\036\010\040\011\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\052\001\001\000\010\007\036\010\040\011\053\001\001" +
    "\000\002\001\001\000\004\006\055\001\001\000\010\007" +
    "\036\010\040\011\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\036\010\040\011\061\001\001\000" +
    "\004\006\062\001\001\000\004\007\063\001\001\000\004" +
    "\006\064\001\001\000\010\007\036\010\040\011\065\001" +
    "\001\000\002\001\001\000\010\007\036\010\040\011\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\073\001\001\000\010\007\036\010\040" +
    "\011\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\100\010\040\011\101\001\001" +
    "\000\004\013\102\001\001\000\002\001\001\000\010\007" +
    "\104\010\040\011\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\110\001\001\000\010\007\036\010\040\011\111\001\001" +
    "\000\002\001\001\000\004\006\113\001\001\000\010\007" +
    "\036\010\040\011\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\120\001\001\000" +
    "\004\006\121\001\001\000\010\007\036\010\040\011\122" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
  public Interpreter _interpreter;
  
  private boolean _debug = false;
  
  
  public SintacticParser(Interpreter pInterpreter, java_cup.runtime.Scanner pScanner, boolean pDebug){
     super(pScanner);
     _interpreter = pInterpreter;
    _debug = pDebug;
    
  }
  
  
  
    /**
     * Método que analiza un archivo txt
     */
    public void analizarTxt(String pFileName){
    try {
      //SintacticParser sintactico = new SintacticParser(new LexicalParser(new FileReader(pFileName)));
      Object resultado = this.parse().value;
      if(resultado instanceof LProgram){
      	LProgram result = (LProgram) resultado;
      	result.prepare();
      	result.execute();
      	_interpreter.sendToArduino();
      	System.out.println("SE EJECUTO UN LPROGRAM");
      }
      if(_debug)
	System.out.println(ConstInterpreter.SIN_FINISH_PARSE_TXT + pFileName);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
 
  
  
  
  public void analizarEntrada(){
    try {
      //SintacticParser sintactico = new SintacticParser(new LexicalParser(pReader));
      Object resultado = this.parse().value;
      if(resultado instanceof LProgram){
      	LProgram result = (LProgram) resultado;
      	result.prepare();
      	result.execute();
      	_interpreter.sendToArduino();
      	System.out.println("SE EJECUTO UN LPROGRAM");
      }
      if(_debug)
	System.out.println(ConstInterpreter.SIN_FINISH_PARSE_ENTRY);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
  

  
  /**
   * Método que indica sobre un error sintactico encontrado
   */
  public void report_error(String pMessage, Object pInfo) {
    
    StringBuilder string = new StringBuilder("Error");
    
    if(pInfo instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) pInfo);
      
      if (symbol.left >= 0) {
	string.append(" en la linea " + (symbol.left+1));
	
	if (symbol.right >= 0)
	  string.append(", columna " + (symbol.right+1));
      }
    }
    
    string.append(" : " + pMessage);
    System.err.println(string);
    System.exit(1);
  }
  
  
  /**
   * Método que se llama cuando se encuentra un error del cual
   * no se puede recuperar
   */    
  public void report_fatal_error(String pMessage, Object pInfo) {
    report_error(pMessage, pInfo);
    System.exit(1);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   * del cual no es posible recuperarse
   */
  public void unrecovered_syntax_error(Symbol cur_token){
    String report = "No se logro recuperar del error, se detuvo el parseo";
    report_fatal_error(report, null);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   */
  public void syntax_error(Symbol cur_token){
     report_error("Error de sintaxis", cur_token);
  }
  


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticParser$actions {


    

  

  private final SintacticParser parser;

  /** Constructor */
  CUP$SintacticParser$actions(SintacticParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticParser$do_action(
    int                        CUP$SintacticParser$act_num,
    java_cup.runtime.lr_parser CUP$SintacticParser$parser,
    java.util.Stack            CUP$SintacticParser$stack,
    int                        CUP$SintacticParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // espacios_saltos ::= LINEA_VACIA 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios_saltos",7, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // espacios_saltos ::= espacios 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios_saltos",7, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // espacios_saltos ::= saltos espacios 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios_saltos",7, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // saltos ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("saltos",6, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // saltos ::= saltos SALTO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("saltos",6, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // espacios ::= 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios",5, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // espacios ::= espacios ESPACIO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios",5, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramList ::= PARAM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 System.out.println("Parametro: " + ((String)p)); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("paramList",9, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramList ::= paramList espacios PARAM 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 System.out.println("Parametros: " + ((String)l) + " " + ((String)p) ); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("paramList",9, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= PARAM 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new String(v); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new Integer(e); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= FLOAT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		Float p = (Float)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new Float(p); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedimiento ::= PARA espacios FUNC espacios paramList espacios_saltos 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).value;
		 RESULT = new String("Crear el procedimiento: " + t + " con variables"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedimiento ::= PARA espacios FUNC espacios_saltos 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = new String("Crear el procedimiento: " + f); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaOrdenes ::= error 
            {
              LListOrders RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaOrdenes ::= ENTERO 
            {
              LListOrders RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 System.out.println("No me has dicho que hacer con: " + e); System.exit(1); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaOrdenes ::= HAZ espacios VAR espacios param espacios_saltos 
            {
              LListOrders RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(f); params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_HAZ, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaOrdenes ::= BJ_LAPIZ espacios_saltos 
            {
              LListOrders RESULT =null;
		 RESULT = new LListOrders(ConstInterpreter.CMD_BL, null); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaOrdenes ::= SB_LAPIZ espacios_saltos 
            {
              LListOrders RESULT =null;
		 RESULT = new LListOrders(ConstInterpreter.CMD_SL, null); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaOrdenes ::= CENTRO espacios_saltos 
            {
              LListOrders RESULT =null;
		 RESULT = new LListOrders(ConstInterpreter.CMD_CENTER, null); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaOrdenes ::= PON_RUMBO espacios param espacios_saltos 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_RUMBO, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaOrdenes ::= GI espacios param espacios_saltos 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_GI, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaOrdenes ::= GD espacios param espacios_saltos 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_GD, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaOrdenes ::= RE espacios param espacios_saltos 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_RE, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaOrdenes ::= AV espacios param espacios_saltos 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_AV, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaOrdenes ::= PON_POS espacios PC_IZQ espacios_saltos param espacios param espacios_saltos PC_DER espacios_saltos 
            {
              LListOrders RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)).value;
		 ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p); params.add(t);
		      RESULT = new LListOrders(ConstInterpreter.CMD_POS, params); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // orden ::= listaOrdenes 
            {
              LOrder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LListOrders s = (LListOrders)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LOrder(s); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("orden",2, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // orden ::= REPITE espacios param espacios PC_IZQ espacios_saltos programa PC_DER espacios_saltos 
            {
              LOrder RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		LProgram r = (LProgram)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		 LRepeat repeat = new LRepeat(p, r);
	       RESULT = new LOrder(repeat); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("orden",2, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ordenParcial ::= orden 
            {
              LPartialOrder RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LOrder s = (LOrder)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LPartialOrder(s); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("ordenParcial",1, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= procedimiento 
            {
              LProgram RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 System.out.println(p); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= ordenParcial 
            {
              LProgram RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LPartialOrder o = (LPartialOrder)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LProgram(o); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		LProgram start_val = (LProgram)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		RESULT = start_val;
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticParser$parser.done_parsing();
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= programa ordenParcial 
            {
              LProgram RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		LProgram p = (LProgram)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		LPartialOrder o = (LPartialOrder)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = new LProgram(p, o); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

