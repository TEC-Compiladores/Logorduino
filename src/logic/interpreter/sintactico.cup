/* ################# Delaracion de paquetes ################# */

package logic.interpreter;
import java.util.ArrayList;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.StringReader;

action code{:
    

  
:}

/* ################# Parser Code ################# */
/* Código para el manejo de errores que se copia directamente a la clase generada */

parser code{:
  
  public Interpreter _interpreter;
  
  private boolean _debug = false;
  
  
  public SintacticParser(Interpreter pInterpreter, java_cup.runtime.Scanner pScanner, boolean pDebug){
     super(pScanner);
     _interpreter = pInterpreter;
    _debug = pDebug;
    
  }
  
  
  
    /**
     * Método que analiza un archivo txt
     */
    public void analizarTxt(String pFileName){
    try {
      //SintacticParser sintactico = new SintacticParser(new LexicalParser(new FileReader(pFileName)));
      Object resultado = this.parse().value;
      if(resultado instanceof LProgram){
      	LProgram result = (LProgram) resultado;
      	result.prepare();
      	result.execute();
      	_interpreter.sendToArduino();
      	System.out.println("SE EJECUTO UN LPROGRAM");
      }
      if(_debug)
	System.out.println(ConstInterpreter.SIN_FINISH_PARSE_TXT + pFileName);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
 
  
  
  
  public void analizarEntrada(){
    try {
      //SintacticParser sintactico = new SintacticParser(new LexicalParser(pReader));
      Object resultado = this.parse().value;
      if(resultado instanceof LProgram){
      	LProgram result = (LProgram) resultado;
      	result.prepare();
      	result.execute();
      	_interpreter.sendToArduino();
      	System.out.println("SE EJECUTO UN LPROGRAM");
      }
      if(_debug)
	System.out.println(ConstInterpreter.SIN_FINISH_PARSE_ENTRY);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
  

  
  /**
   * Método que indica sobre un error sintactico encontrado
   */
  public void report_error(String pMessage, Object pInfo) {
    
    StringBuilder string = new StringBuilder("Error");
    
    if(pInfo instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) pInfo);
      
      if (symbol.left >= 0) {
	string.append(" en la linea " + (symbol.left+1));
	
	if (symbol.right >= 0)
	  string.append(", columna " + (symbol.right+1));
      }
    }
    
    string.append(" : " + pMessage);
    System.err.println(string);
    System.exit(1);
  }
  
  
  /**
   * Método que se llama cuando se encuentra un error del cual
   * no se puede recuperar
   */    
  public void report_fatal_error(String pMessage, Object pInfo) {
    report_error(pMessage, pInfo);
    System.exit(1);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   * del cual no es posible recuperarse
   */
  public void unrecovered_syntax_error(Symbol cur_token){
    String report = "No se logro recuperar del error, se detuvo el parseo";
    report_fatal_error(report, null);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   */
  public void syntax_error(Symbol cur_token){
     report_error("Error de sintaxis", cur_token);
  }
  

:};



/* ############### Declaracion de terminales y no terminales ############### */

/* Los terminales son los tokens obtenidos por el analizador lexico */

/* Palabras reservadas */
terminal FIN, AV, RE, GD, GI, REPITE, PON_POS, PON_RUMBO, CENTRO;
terminal HAZ, PARA, SB_LAPIZ, BJ_LAPIZ;

/* Caracteres */
terminal PC_IZQ, PC_DER, ESPACIO, SALTO, LINEA_VACIA;

/* Variables, parametros, nombre de funciones y valor de enteros */
terminal String VAR, PARAM, FUNC;
terminal Integer ENTERO;
terminal Float FLOAT;


/* No terminales utilizados para definir la gramatica */
non terminal LProgram programa;
non terminal LPartialOrder ordenParcial;
non terminal LOrder orden;
non terminal LListOrders listaOrdenes;

non terminal Object param;
non terminal Object espacios, saltos, espacios_saltos;
non terminal String procedimiento, paramList;





/* ############### Gramatica ############### */

/**
 * Raíz de la gramatica
 * Un programa puede estar formado por un comando del lenguaje
 * o varios comandos seguidos por espacio
 */
programa ::= programa:p ordenParcial:o
				{: RESULT = new LProgram(p, o); :}
			 |
			 ordenParcial:o
			 	{: RESULT = new LProgram(o); :}
			 |
			 procedimiento:p
			 	{: System.out.println(p); :}
			 ;

ordenParcial ::= 
		 orden:s
		   {: RESULT = new LPartialOrder(s); :}
		 ;


/**
 * Una orden puede estar formada por:
 * 
 * ** El comando "repite", el cual puede tener un programa dentro
 *    de su argumento (lista de comandos)
 * ** Una lista de comandos
 */
orden ::= 
	  REPITE espacios param:p espacios PC_IZQ espacios_saltos programa:r PC_DER espacios_saltos
	    {: LRepeat repeat = new LRepeat(p, r);
	       RESULT = new LOrder(repeat); :}
	  |
	  listaOrdenes:s
	    {: RESULT = new LOrder(s); :}
	  ;
	      
	      
/**
 * Son todas las ordenes simples del lenguaje, que reciben parametros constantes
 * o variables
 *
 * La orden repite no se encuentra en esta lista porque no recibe parametros constantes
 * sino una serie de ordenes
 */ 	      
listaOrdenes ::= 
		 PON_POS espacios PC_IZQ espacios_saltos param:p espacios param:t espacios_saltos PC_DER espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p); params.add(t);
		      RESULT = new LListOrders(ConstInterpreter.CMD_POS, params); :}
		 |
		 AV espacios param:p espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_AV, params); :}
		 |
		 RE espacios param:p espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_RE, params); :}
		 |
		 GD espacios param:p espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_GD, params); :}
		 |
		 GI espacios param:p espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_GI, params); :}
		 |
		 PON_RUMBO espacios param:p espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_RUMBO, params); :}
		 |
		 CENTRO espacios_saltos
		   {: RESULT = new LListOrders(ConstInterpreter.CMD_CENTER, null); :}
		 |
		 SB_LAPIZ espacios_saltos
		   {: RESULT = new LListOrders(ConstInterpreter.CMD_SL, null); :}
		 |
		 BJ_LAPIZ espacios_saltos
		   {: RESULT = new LListOrders(ConstInterpreter.CMD_BL, null); :}
		 |
 		 HAZ espacios VAR:f espacios param:p espacios_saltos
		   {: ArrayList<Object> params = new ArrayList<Object>();
		   	  params.add(f); params.add(p);
		   	  RESULT = new LListOrders(ConstInterpreter.CMD_HAZ, params); :}
		 |
		 ENTERO:e {: System.out.println("No me has dicho que hacer con: " + e); System.exit(1); :}
		 |
		 error
		 ;
		 
		 
procedimiento ::=
				PARA espacios FUNC:f espacios_saltos
					{: RESULT = new String("Crear el procedimiento: " + f); :}
				|
				PARA espacios FUNC:t espacios paramList espacios_saltos
					{: RESULT = new String("Crear el procedimiento: " + t + " con variables"); :}
				;
  
	  
/**
 * Un parametro puede ser:
 *
 * ** Un entero
 * ** Un float
 * ** Un identificador con el nombre de una variable creada
 */	     
param ::=
	  FLOAT:p
	    {: RESULT = new Float(p); :}
	  |
	  ENTERO:e
	  	{: RESULT = new Integer(e); :}
	  |
	  PARAM:v
	  	{: RESULT = new String(v); :}
	  ;
	  
	  
	  
paramList ::= 
			paramList:l espacios PARAM:p
				{: System.out.println("Parametros: " + ((String)l) + " " + ((String)p) ); :}
			|
			PARAM:p 
				{: System.out.println("Parametro: " + ((String)p)); :}
			;
	  

	  
espacios ::=
	     espacios ESPACIO
	     |
	     /* epsilon */
	     ;
	     
saltos ::=
		   saltos SALTO
		   |
		   SALTO
		   ;
		   
	     
	     
espacios_saltos ::=
					saltos espacios
					|
					espacios
					|
					LINEA_VACIA
					;
	     
	  
	     



















