
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 27 03:47:31 CST 2016
//----------------------------------------------------

package logic;

import java_cup.runtime.*;
import java.io.FileReader;
import java.io.StringReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 27 03:47:31 CST 2016
  */
public class SintacticParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticParser() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\005\012\000\002\005\003" +
    "\000\002\006\012\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\003\000\002\007\003\000\002\004\004\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\030\003\016\006\015\007\014\010\007\011" +
    "\005\012\022\013\012\014\021\015\010\020\013\021\020" +
    "\001\002\000\032\002\067\003\016\006\015\007\014\010" +
    "\007\011\005\012\022\013\012\014\021\015\010\020\013" +
    "\021\020\001\002\000\004\024\024\001\002\000\034\002" +
    "\uffff\003\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\020\uffff\021\uffff\023\uffff\001" +
    "\002\000\004\024\024\001\002\000\004\024\024\001\002" +
    "\000\034\002\ufffe\003\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe\021\ufffe" +
    "\023\ufffe\001\002\000\004\024\024\001\002\000\004\024" +
    "\024\001\002\000\004\024\024\001\002\000\004\024\024" +
    "\001\002\000\034\002\ufff2\003\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2" +
    "\021\ufff2\023\ufff2\001\002\000\034\002\ufffc\003\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\021\ufffc\023\ufffc\001\002\000\004\024" +
    "\024\001\002\000\004\024\024\001\002\000\004\024\024" +
    "\001\002\000\006\024\025\030\027\001\002\000\042\002" +
    "\uffef\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\030\uffef\001\002\000\042\002\ufff0\003\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\030\ufff0\001\002\000\004\024\024\001\002\000\006\023" +
    "\ufff1\024\ufff1\001\002\000\006\022\031\024\025\001\002" +
    "\000\030\003\016\006\015\007\014\010\007\011\005\012" +
    "\022\013\012\014\021\015\010\020\013\021\020\001\002" +
    "\000\032\003\016\006\015\007\014\010\007\011\005\012" +
    "\022\013\012\014\021\015\010\020\013\021\020\023\034" +
    "\001\002\000\034\002\001\003\001\006\001\007\001\010" +
    "\001\011\001\012\001\013\001\014\001\015\001\020\001" +
    "\021\001\023\001\001\002\000\004\024\024\001\002\000" +
    "\036\002\ufffd\003\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\015\ufffd\020\ufffd\021\ufffd\023" +
    "\ufffd\024\025\001\002\000\006\024\025\030\027\001\002" +
    "\000\004\024\024\001\002\000\036\002\ufff6\003\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\020\ufff6\021\ufff6\023\ufff6\024\025\001\002\000" +
    "\036\002\ufff3\003\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\020\ufff3\021\ufff3\023" +
    "\ufff3\024\025\001\002\000\006\024\025\030\027\001\002" +
    "\000\004\024\024\001\002\000\036\002\ufffa\003\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\020\ufffa\021\ufffa\023\ufffa\024\025\001\002\000" +
    "\006\024\025\030\027\001\002\000\004\024\024\001\002" +
    "\000\036\002\ufff9\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9" +
    "\023\ufff9\024\025\001\002\000\036\002\ufff4\003\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\020\ufff4\021\ufff4\023\ufff4\024\025\001\002\000" +
    "\006\022\052\024\025\001\002\000\004\030\027\001\002" +
    "\000\004\024\024\001\002\000\006\024\025\030\027\001" +
    "\002\000\004\023\056\001\002\000\004\024\024\001\002" +
    "\000\036\002\ufffb\003\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\020\ufffb\021\ufffb" +
    "\023\ufffb\024\025\001\002\000\036\002\ufff5\003\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\020\ufff5\021\ufff5\023\ufff5\024\025\001\002\000" +
    "\006\024\025\030\027\001\002\000\004\024\024\001\002" +
    "\000\036\002\ufff8\003\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\021\ufff8" +
    "\023\ufff8\024\025\001\002\000\006\024\025\030\027\001" +
    "\002\000\004\024\024\001\002\000\036\002\ufff7\003\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\020\ufff7\021\ufff7\023\ufff7\024\025\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\012\002\003\003\005\005\010\006\016\001" +
    "\001\000\010\003\032\005\010\006\016\001\001\000\004" +
    "\004\063\001\001\000\002\001\001\000\004\004\060\001" +
    "\001\000\004\004\057\001\001\000\002\001\001\000\004" +
    "\004\050\001\001\000\004\004\047\001\001\000\004\004" +
    "\044\001\001\000\004\004\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\040\001\001\000\004\004" +
    "\035\001\001\000\004\004\022\001\001\000\004\007\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\031\003\005\005\010\006\016\001\001\000\010\003" +
    "\032\005\010\006\016\001\001\000\002\001\001\000\004" +
    "\004\034\001\001\000\002\001\001\000\004\007\036\001" +
    "\001\000\004\004\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\042\001\001\000\004\004\043\001" +
    "\001\000\002\001\001\000\004\007\045\001\001\000\004" +
    "\004\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\052\001\001\000\004\004\053" +
    "\001\001\000\004\007\054\001\001\000\002\001\001\000" +
    "\004\004\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\061\001\001\000\004\004\062\001\001\000" +
    "\002\001\001\000\004\007\064\001\001\000\004\004\065" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
  private Core _core;
  
  private boolean _debug = false;
  
  
  public SintacticParser(Core pCore, boolean pDebug){
     super();
     _core = pCore;
    _debug = pDebug;
  }

  
  
    /**
     * Método que analiza un archivo txt
     */
    public void analizarTxt(String pFileName){
    try {
      SintacticParser sintactico = new SintacticParser(new LexicalParser(new FileReader(pFileName)));
      Object resultado = sintactico.parse().value;
      if(_debug)
	System.out.println(ConstantsLogic.SIN_FINISH_PARSE_TXT + pFileName);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
  
  
  
  public void analizarEntrada(StringReader pReader){
    try {
      SintacticParser sintactico = new SintacticParser(new LexicalParser(pReader));
      Object resultado = sintactico.parse().value;
      if(_debug)
	System.out.println(ConstantsLogic.SIN_FINISH_PARSE_ENTRY);
    } catch(Exception e) {
      e.printStackTrace();
    }
  }
  

  
  /**
   * Método que indica sobre un error sintactico encontrado
   */
  public void report_error(String pMessage, Object pInfo) {
    
    StringBuilder string = new StringBuilder("Error");
    
    if(pInfo instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) pInfo);
      
      if (symbol.left >= 0) {
	string.append(" en la linea " + (symbol.left+1));
	
	if (symbol.right >= 0)
	  string.append(", columna " + (symbol.right+1));
      }
    }
    
    string.append(" : " + pMessage);
    System.err.println(string);
  }
  
  
  /**
   * Método que se llama cuando se encuentra un error del cual
   * no se puede recuperar
   */    
  public void report_fatal_error(String pMessage, Object pInfo) {
    report_error(pMessage, pInfo);
    System.exit(1);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   * del cual no es posible recuperarse
   */
  public void unrecovered_syntax_error(Symbol cur_token){
    String report = "No se logro recuperar del error, se detuvo el parseo";
    report_fatal_error(report, null);
  }
  
  
  /**
   * Método que es llamado cuando se encuentra un error de sintaxis
   */
  public void syntax_error(Symbol cur_token){
     report_error("Error de sintaxis", null);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticParser$actions {
  private final SintacticParser parser;

  /** Constructor */
  CUP$SintacticParser$actions(SintacticParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticParser$do_action(
    int                        CUP$SintacticParser$act_num,
    java_cup.runtime.lr_parser CUP$SintacticParser$parser,
    java.util.Stack            CUP$SintacticParser$stack,
    int                        CUP$SintacticParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // espacios ::= ESPACIO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // espacios ::= espacios ESPACIO 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("espacios",2, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= ENTERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaOrdenes ::= error 
            {
              String RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaOrdenes ::= BJ_LAPIZ espacios 
            {
              String RESULT =null;
		 RESULT = new String("BAJE EL LAPIZ"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaOrdenes ::= SB_LAPIZ espacios 
            {
              String RESULT =null;
		 RESULT = new String("SUBI EL LAPIZ"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaOrdenes ::= CENTRO espacios 
            {
              String RESULT =null;
		 RESULT = new String("ME COLOQUE EN EL CENTRO"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaOrdenes ::= PON_RUMBO espacios param espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = new String("GIRE: " + p.intValue() + " grados"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaOrdenes ::= GI espacios param espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = new String("GIRE " + p.intValue() + " A LA IZQUIERDA"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaOrdenes ::= GD espacios param espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = new String("GIRE " + p.intValue() + " A LA DERECHA"); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaOrdenes ::= RE espacios param espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = new String("RETROCEDI: " + p.intValue()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaOrdenes ::= AV espacios param espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = new String("AVANCE: " + p.intValue()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaOrdenes ::= PON_POS espacios PC_IZQ param espacios param PC_DER espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		 RESULT = new String("ME MOVI A X: " + p.intValue() + " Y: " + t.intValue()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("listaOrdenes",4, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // orden ::= listaOrdenes 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("orden",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // orden ::= REPITE espacios param espacios PC_IZQ programa PC_DER espacios 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)).value;
		 RESULT = new String("REPETI " + p.intValue() + " veces "  ); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("orden",3, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ordenParcial ::= orden 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.peek()).value;
		 System.out.println(s); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("ordenParcial",1, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= ordenParcial 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		RESULT = start_val;
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticParser$parser.done_parsing();
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= programa ordenParcial 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

