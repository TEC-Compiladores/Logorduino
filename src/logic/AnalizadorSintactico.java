//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 23 01:53:01 CST 2016
//----------------------------------------------------

package logic;

import java.io.StringReader;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Wed Mar 23 01:53:01 CST 2016
 */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public AnalizadorSintactico() {
		super();
	}



	/** Constructor which sets the default scanner. */
	public AnalizadorSintactico(java_cup.runtime.Scanner s) {
		super(s);
	}



	/** Constructor which sets the default scanner. */
	public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}



	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\020\000\002\002\004\000\002\002\004\000\002\002"
			+ "\003\000\002\003\003\000\002\004\012\000\002\004\012"
			+ "\000\002\004\003\000\002\005\006\000\002\005\006\000"
			+ "\002\005\006\000\002\005\006\000\002\005\006\000\002"
			+ "\005\004\000\002\005\004\000\002\005\004\000\002\006" + "\003" });



	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}



	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\062\000\026\006\014\007\012\010\006\011\005\012"
			+ "\021\013\010\014\017\015\007\020\011\021\016\001\002"
			+ "\000\030\002\063\006\014\007\012\010\006\011\005\012"
			+ "\021\013\010\014\017\015\007\020\011\021\016\001\002"
			+ "\000\004\024\060\001\002\000\004\024\055\001\002\000"
			+ "\004\024\054\001\002\000\004\024\045\001\002\000\004"
			+ "\024\044\001\002\000\004\024\041\001\002\000\032\002"
			+ "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb"
			+ "\014\ufffb\015\ufffb\020\ufffb\021\ufffb\023\ufffb\001\002\000"
			+ "\004\024\036\001\002\000\030\002\uffff\006\uffff\007\uffff"
			+ "\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\020"
			+ "\uffff\021\uffff\001\002\000\004\024\035\001\002\000\004"
			+ "\024\032\001\002\000\030\002\ufffe\006\ufffe\007\ufffe\010"
			+ "\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015\ufffe\020\ufffe"
			+ "\021\ufffe\001\002\000\004\024\022\001\002\000\004\030"
			+ "\024\001\002\000\004\024\025\001\002\000\006\023\ufff2"
			+ "\024\ufff2\001\002\000\004\022\026\001\002\000\026\006"
			+ "\014\007\012\010\006\011\005\012\021\013\010\014\017"
			+ "\015\007\020\011\021\016\001\002\000\004\023\030\001"
			+ "\002\000\004\024\031\001\002\000\032\002\ufffd\006\ufffd"
			+ "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015"
			+ "\ufffd\020\ufffd\021\ufffd\023\ufffd\001\002\000\004\030\024"
			+ "\001\002\000\004\024\034\001\002\000\032\002\ufff6\006"
			+ "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6"
			+ "\015\ufff6\020\ufff6\021\ufff6\023\ufff6\001\002\000\032\002"
			+ "\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3"
			+ "\014\ufff3\015\ufff3\020\ufff3\021\ufff3\023\ufff3\001\002\000"
			+ "\004\030\024\001\002\000\004\024\040\001\002\000\032"
			+ "\002\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013"
			+ "\ufffa\014\ufffa\015\ufffa\020\ufffa\021\ufffa\023\ufffa\001\002"
			+ "\000\004\030\024\001\002\000\004\024\043\001\002\000"
			+ "\032\002\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9"
			+ "\013\ufff9\014\ufff9\015\ufff9\020\ufff9\021\ufff9\023\ufff9\001"
			+ "\002\000\032\002\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4"
			+ "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4\023"
			+ "\ufff4\001\002\000\004\022\046\001\002\000\004\030\024"
			+ "\001\002\000\004\024\050\001\002\000\004\030\024\001"
			+ "\002\000\004\023\052\001\002\000\004\024\053\001\002"
			+ "\000\032\002\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012"
			+ "\ufffc\013\ufffc\014\ufffc\015\ufffc\020\ufffc\021\ufffc\023\ufffc"
			+ "\001\002\000\032\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011"
			+ "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5"
			+ "\023\ufff5\001\002\000\004\030\024\001\002\000\004\024"
			+ "\057\001\002\000\032\002\ufff8\006\ufff8\007\ufff8\010\ufff8"
			+ "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020\ufff8\021"
			+ "\ufff8\023\ufff8\001\002\000\004\030\024\001\002\000\004"
			+ "\024\062\001\002\000\032\002\ufff7\006\ufff7\007\ufff7\010"
			+ "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7"
			+ "\021\ufff7\023\ufff7\001\002\000\004\002\000\001\002\000"
			+ "\030\002\001\006\001\007\001\010\001\011\001\012\001"
			+ "\013\001\014\001\015\001\020\001\021\001\001\002" });



	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}



	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\062\000\012\002\003\003\014\004\017\005\012\001"
			+ "\001\000\010\003\063\004\017\005\012\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\006\022\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\006\004\026\005\012\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\006"
			+ "\032\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\006\036\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\006\041\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\006\046\001\001\000\002\001\001\000\004\006\050"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\006\055\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\006\060\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001" });



	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}



	/** Instance of action encapsulation class. */
	protected CUP$AnalizadorSintactico$actions action_obj;



	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$AnalizadorSintactico$actions(this);
	}



	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser,
			java.util.Stack stack, int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
	}



	/** Indicates start state. */
	public int start_state() {
		return 0;
	}



	/** Indicates start production. */
	public int start_production() {
		return 1;
	}



	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}



	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}





	/* Método que indica sobre un error sintactico encontrado */
	public void report_error(String pMessage, Object pInfo) {

		StringBuilder string = new StringBuilder("Error");

		if (pInfo instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) pInfo);

			if (symbol.left >= 0) {
				string.append(" en la linea " + (symbol.left + 1));

				if (symbol.right >= 0)
					string.append(", columna " + (symbol.right + 1));
			}
		}

		string.append(" : " + pMessage);
		System.err.println(string);
	}



	/*
	 * Método que se llama cuando se encuentra un error del cual no se puede
	 * recuperar
	 */
	public void report_fatal_error(String pMessage, Object pInfo) {
		report_error(pMessage, pInfo);
		System.exit(1);
	}



	public static void analizar(StringReader args) {
		try {
			AnalizadorSintactico sintactico = new AnalizadorSintactico(new AnalizadorLexico(args));
			Object resultado = sintactico.parse().value;
			System.out.println("\n Finalizado!!");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


}



/** Cup generated class to encapsulate user supplied action code. */
class CUP$AnalizadorSintactico$actions {

	private final AnalizadorSintactico parser;



	/** Constructor */
	CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
		this.parser = parser;
	}



	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
			int CUP$AnalizadorSintactico$act_num,
			java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
			java.util.Stack CUP$AnalizadorSintactico$stack, int CUP$AnalizadorSintactico$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

		/* select the action based on the action number */
		switch (CUP$AnalizadorSintactico$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // param ::= ENTERO
			{
				Integer RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).right;
				Integer e = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.peek()).value;
				RESULT = e;
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("param", 4,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // ordenSimp ::= BJ_LAPIZ ESPACIO
			{
				String RESULT = null;
				RESULT = new String("BAJE EL LAPIZ");
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 1)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // ordenSimp ::= SB_LAPIZ ESPACIO
			{
				String RESULT = null;
				RESULT = new String("SUBI EL LAPIZ");
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 1)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // ordenSimp ::= CENTRO ESPACIO
			{
				String RESULT = null;
				RESULT = new String("ME COLOQUE EN EL CENTRO");
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 1)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // ordenSimp ::= PON_RUMBO ESPACIO param ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
				RESULT = new String("GIRE: " + p.intValue() + " grados");
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 3)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // ordenSimp ::= GI ESPACIO param ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
				RESULT = new String("GIRE " + p.intValue() + " A LA IZQUIERDA");
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 3)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // ordenSimp ::= GD ESPACIO param ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
				RESULT = new String("GIRE " + p.intValue() + " A LA DERECHA");
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 3)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // ordenSimp ::= RE ESPACIO param ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
				RESULT = new String("RETROCEDI: " + p.intValue());
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 3)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // ordenSimp ::= AV ESPACIO param ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
				RESULT = new String("AVANCE: " + p.intValue());
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenSimp",
						3,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 3)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // ordenComp ::= ordenSimp
			{
				String RESULT = null;
				int sleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).left;
				int sright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.peek()).value;
				RESULT = s;
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ordenComp",
						2, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // ordenComp ::= PON_POS ESPACIO PC_IZQ param ESPACIO param
					// PC_DER ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 4)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 4)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 4)).value;
				int tleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 2)).left;
				int tright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 2)).right;
				Integer t = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 2)).value;

				RESULT = new String("ME MOVI A X: " + p.intValue() + " Y: " + t.intValue());

				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenComp",
						2,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 7)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // ordenComp ::= REPITE ESPACIO param ESPACIO PC_IZQ
					// ordenComp PC_DER ESPACIO
			{
				String RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 5)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 5)).right;
				Integer p = (Integer) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 5)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 2)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 2)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 2)).value;
				RESULT = new String("REPETI " + p.intValue() + " veces " + s);
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"ordenComp",
						2,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 7)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // listaOrdenes ::= ordenComp
			{
				Object RESULT = null;
				int sleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).left;
				int sright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.peek()).value;
				System.out.println(s);
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"listaOrdenes", 1,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // programa ::= listaOrdenes
			{
				Object RESULT = null;

				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",
						0, ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // $START ::= programa EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).right;
				Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
						.elementAt(CUP$AnalizadorSintactico$top - 1)).value;
				RESULT = start_val;
				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"$START",
						0,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 1)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				/* ACCEPT */
				CUP$AnalizadorSintactico$parser.done_parsing();
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // programa ::= programa listaOrdenes
			{
				Object RESULT = null;

				CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol(
						"programa",
						0,
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack
								.elementAt(CUP$AnalizadorSintactico$top - 1)),
						((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()), RESULT);
			}
				return CUP$AnalizadorSintactico$result;

				/* . . . . . . */
			default:
				throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
